'''
Mesh convergence study model
Original model require step, boundary conditions and loads.
period will not be accepted in the model name
'''
modelName="solid"
part1Name="base"
part2Name="core"
MeshSize1=[5.0, 4.5, 4.0, 3.5, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5]
MeshSize2=[0.1, 0.07, 0.05]
stepName="Step-1"

#-----DO NOT MODIFY BELOW THIS LINE-----
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *

mdl=mdb.models[modelName]
mdls=[]
for i in range(len(MeshSize1)):
	for j in range(len(MeshSize2)):
		mdb.Model(name='MeshSize {0}-{1}'.format(int(MeshSize1[i]*10), int(MeshSize2[j]*100)), objectToCopy=mdb.models[modelName])
		mdls.append(mdb.models['MeshSize {0}-{1}'.format(int(MeshSize1[i]*10), int(MeshSize2[j]*100))])


for i in range(len(MeshSize1)):
	for j in range(len(MeshSize2)):
		temp=len(MeshSize2)*i+j
		mdls[temp].parts[part1Name].setMeshControls(algorithm=MEDIAL_AXIS, regions=mdls[i].parts[part1Name].cells.getSequenceFromMask(('[#1 ]', ), ))
		mdls[temp].parts[part1Name].seedPart(deviationFactor=0.1, minSizeFactor=0.1, size=MeshSize1[i])
		mdls[temp].parts[part1Name].generateMesh()
		mdls[temp].parts[part2Name].seedPart(deviationFactor=0.1, minSizeFactor=0.1, size=MeshSize2[j])
		mdls[temp].parts[part2Name].generateMesh()
		mdls[temp].rootAssembly.regenerate()

#---Job---
for i in range(len(MeshSize1)):
	for j in range(len(MeshSize2)):
		temp=len(MeshSize2)*i+j
		mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
			explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
			memory=99, memoryUnits=PERCENTAGE, model=mdls[temp], modelPrint=OFF, 
			multiprocessingMode=DEFAULT, name="Job_{0}_{1}".format(int(MeshSize1[i]*10), int(MeshSize2[j]*100)), nodalOutputPrecision=SINGLE, 
			numCpus=4, numDomains=4, numGPUs=0, queue=None, scratch='', type=ANALYSIS, 
			userSubroutine='', waitHours=0, waitMinutes=0)

#-------------------------------------------------
#             After all the jobs are done
#-------------------------------------------------
from odbAccess import *

mdl=mdb.models[modelName]
mdls=[]
odbs=[]

for i in range(len(MeshSize1)):
	for j in range(len(MeshSize2)):
		mdls.append(mdb.models['MeshSize {0}-{1}'.format(int(MeshSize1[i]*10), int(MeshSize2[j]*100))])
		odbs.append(openOdb('Job_{0}_{1}.odb'.format(int(MeshSize1[i]*10), int(MeshSize2[j]*100))))

#-----Write File-----

with open("Multi conv.csv", "w") as f:
	f.write("part1, , ,part2, , , , \n")
	f.write("Mesh size,nodes,elements,Mesh size,nodes,elements,MAX MISES,MAX. PRIN\n")
	for i in range(len(MeshSize1)):
		for j in range(len(MeshSize2)):
			temp=len(MeshSize2)*i+j
			base=mdls[temp].parts[part1Name]
			core=mdls[temp].parts[part2Name]
			f.write("{0},{1},{2},{3},{4},{5},".format(MeshSize1[i], len(base.nodes), len(base.elements), MeshSize2[j], len(core.nodes), len(core.elements)))
			misesMax=0
			stress=odbs[temp].steps[stepName].frames[-1].fieldOutputs['S'].values
			for v in stress:
				if v.mises>misesMax:
					misesMax=v.mises
			f.write("{0},".format(misesMax))
			prinMax=0
			stress=odbs[temp].steps[stepName].frames[-1].fieldOutputs['S'].values
			for v in stress:
				if abs(v.maxPrincipal)>prinMax:
					prinMax=abs(v.maxPrincipal)
			f.write("{0},".format(prinMax))
			f.write(" \n")

